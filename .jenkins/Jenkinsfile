podTemplate(containers: [
        containerTemplate(name: 'tufin', image: 'eu.gcr.io/dream-198012/tufin-cloud-deployer:1.0.0-master', command: 'sleep', args: '99d')
    ]) {
    
    node(POD_LABEL) {
            
        checkout scm
            
        stage('build go code') {
            sh 'echo "go build ./..."'
            sh 'sleep 1'
        }

        stage('build docker image'){
            sh 'echo "docker build my-image"'
            sh 'sleep 1'
        }
            
        stage('Tufin SecureCloud integration'){
            container('tufin') {
                stage('SecureCloud workload security check') {
                    withCredentials([string(credentialsId: 'jenkins-securecloud-api-access-key', variable: 'TUFIN_API_ACCESS_KEY')]) {
                        script {
                            inputFilename = "${WORKSPACE}/k8s/app.yaml"
                            outputFilename = "${inputFilename}.response.json"

                            url = "https://nir.securecloudtestnir.tufin.io/api/v1/orca/model/cross-cluster/workload-risks"
                            code = sh(script: "curl -X POST -s -w '%{response_code}' $url -H 'Authorization: Bearer ${TUFIN_API_ACCESS_KEY}' -H 'Content-Type: application/octet-stream' --data-binary '@${inputFilename}' -o ${outputFilename}", returnStdout: true).trim()
                                
                            echo "HTTP response status code: ${code}"
                            
                            podSecurityContextRisks = sh(script: "jq '[.workloads[].risks?[] | select(.exempted == false)] | unique' ${outputFilename}", returnStdout: true).trim()
                            podSecurityContextRisksCount = sh(script: "jq '[.workloads[].risks?[] | select(.exempted == false)] | unique | length' ${outputFilename}", returnStdout: true).trim()

                            containerSecurityContextRisks = sh(script: "jq '[.workloads[].containers?[].risks?[] | select(.exempted == false)] | unique' ${outputFilename}", returnStdout: true).trim()
                            containerSecurityContextRisksCount = sh(script: "jq '[.workloads[].containers?[].risks?[] | select(.exempted == false)] | unique | length' ${outputFilename}", returnStdout: true).trim()

                            echo "${podSecurityContextRisksCount} Pod Security Context Risks: ${podSecurityContextRisks}"
                            echo "${containerSecurityContextRisksCount} Container Security Context Risks: ${containerSecurityContextRisks}"
                        }
                    }
                }
            }
        }
    }
}
