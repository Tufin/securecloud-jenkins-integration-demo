#!/bin/bash

PrintUsage() {
	echo ""
	echo "Usage: securecloud-image-vulnerability-scan.sh <imageName> <scanScriptFileName> <outputFilename> <minPassScore> [failOnScanError]"
	echo ""
	echo "Mandatory environment variables:"
	echo "  TUFIN_SECURECLOUD_URL     - Tufin SecureCloud URL \"https://<your-account>.securecloud.tufin.io\""
	echo "  TUFIN_SECURECLOUD_API_KEY - API key to Tufin SecureCloud with global admin permissions"
	echo ""
	echo "Mandatory arguments"
	echo "  imageName      - Name of the image to scan"
	echo "  scanScriptFileName - Scan script filename to create"

	echo "  minPassScore - Minimum acceptable security score, possible values are: 'A+', 'A', 'B', 'C', 'D', 'F'"
	echo ""
	echo "Optional arguments"
	echo "  failOnScanError  - Must be one of: 'true' or 'false', default is 'false'"
}

ValidateDependencies() {
	tools=($@)
	for tool in "${tools[@]}"
	do
		command -v ${tool} &> /dev/null
		if [[ $? != 0 ]]; then
			echo "ERROR: '${tool}' is required but wasn't found! please install it."
			exit 1
		fi
	done
}

ValidateUsage() {
	imageName="$1"
	scanScriptFileName="$2"
	outputFilename="$3"
	minPassScore="$4"
	failOnAnyRisk="${5:-false}"

  if [[ -z "${TUFIN_SECURECLOUD_URL}" ]]; then
		echo "ERROR: Please set TUFIN_SECURECLOUD_URL environment variable"
		PrintUsage
		exitOnError
	fi

	if [[ -z "${TUFIN_SECURECLOUD_API_KEY}" ]]; then
		echo "ERROR: Please set TUFIN_SECURECLOUD_API_KEY environment variable"
		PrintUsage
		exitOnError
	fi

	if [[ -z "${imageName}" ]]; then
		echo "ERROR: Please provide an image name for the scan"
		PrintUsage
		exitOnError
	fi

	if [[ -z "${scanScriptFileName}" ]]; then
		echo "ERROR: Please provide image scan script filename to create"
		PrintUsage
		exitOnError
	fi

	if [[ -z "${outputFilename}" ]]; then
		echo "ERROR: Please provide image vulnerability scan results filename to create"
		PrintUsage
		exitOnError
	fi

  if [[ "${minPassScore}" != "A+" && "${minPassScore}" != "A" && "${minPassScore}" != "B" && "${minPassScore}" != "C" && "${minPassScore}" != "D" && "${minPassScore}" != "F" ]]; then
      echo "ERROR: minPassScore argument must be one of 'A+', 'A', 'B', 'C', 'D' or 'F'. Value provided was '${minPassScore}'"
      PrintUsage
      exitOnError
  fi

	if [[ "${failOnScanError}" != "true" && "${failOnScanError}" != "false" ]]; then
		echo "ERROR: failOnScanError argument must be one of 'true' or 'false'. Value provided was '${failOnScanError}'"
		PrintUsage
		exitOnError
	fi
}

exitOnError() {
  if [[ "${failOnScanError}" == "true" ]]; then
    exit 1
  else
    exit 0
  fi
}

DownloadScriptFromSecureCloud() {
	url="${TUFIN_SECURECLOUD_URL}/api/orca/public/scripts/cicd-image-scan"
	code=`curl -s -w "%{response_code}" $url -H "Authorization: Bearer ${TUFIN_SECURECLOUD_API_KEY}" -H "Content-Type: application/octet-stream" -o "${scanScriptFileName}"`

	if [[ "${code}" -ne "200" ]]; then
		echo "ERROR: SecureCloud HTTP response status code was ${code}"
		exitOnError
	fi
}

RunScanScript() {
	bash "${scanScriptFileName}" "${imageName}" "${outputFileName}"
	if [[ $? -ne 0 ]]; then
	  echo "ERROR: Image scan script failed"
	  exitOnError
	fi
}

AnalyzeState() {
  state = `jq -r '.State' "${outputFilename}"`
  if [[ ${state,,} -ne "finished" ]]; then
    echo "Image scan did not finish correctly"
    exitOnError
  fi
}

CharToNum() {
  LC_CTYPE=C printf '%d' "'$1"
}

AnalyzeScore() {
  score = `jq '.Score' "${outputFilename}"`
  score = ${score^^}
  minPassScore = ${minPassScore^^}

  if [[ "${score}" == "A+" ]]; then
    echo "Success - the security score for image ${imageName} is ${score}, your minimum acceptable security score is ${minPassScore}"
  elif [[ "${minPassScore}" == "A+" ]]; then
    exitCode=1
    echo "Failure - the security score for image ${imageName} is ${score} but your minimum acceptable security score is ${minPassScore}"
  else
    numScore = CharToNum ${score}
    numMinPassScore = CharToNum ${minPassScore}
    # Score turned to ASCII code -> lower is better
    if [[ ${numScore} -le ${numMinPassScore} ]]; then
      echo "Success - the security score for image ${imageName} is ${score}, your minimum acceptable security score is ${minPassScore}"
    else
      exitCode=1
      echo "Failure - the security score for image ${imageName} is ${score} but your minimum acceptable security score is ${minPassScore}"
    fi
  fi
}

PrintVulnerabilitiesSummary() {
  vulCount=`jq '[.Vulnerabilities[]?] | length' "${outputFilename}"`
  if [[ ${vulCount} -gt 0 ]]; then
    names=(`jq -r '.Vulnerabilities[].Vulnerability.Name' "${outputFilename}"`)
    links=(`jq -r '.Vulnerabilities[].Vulnerability.Link' "${outputFilename}"`)
    severities=(`jq -r '.Vulnerabilities[].Vulnerability.Severity' "${outputFilename}"`)
    printf "%-20s%-20s%s\n" "Severity" "Name" "Link"
    printf "%s\n" "--------            ----                ----"
    for i in ${!names[@]}; do
      printf "%-20s%-20s%s\n" ${severities[$i]} ${names[$i]} ${links[$i]}
    done
  else
    echo "No vulnerabilities found!"
  fi
}

AnalyzeResponse() {
	response=`cat "${outputFilename}"`
	AnalyzeState
	AnalyzeScore
	PrintVulnerabilitiesSummary
}


#---------------------------------------------------------------------------------------------------------------

exitCode=0
ValidateDependencies "curl" "jq" "docker"
ValidateUsage $@
DownloadScriptFromSecureCloud
RunScanScript
AnalyzeResponse
exit $exitCode
}
